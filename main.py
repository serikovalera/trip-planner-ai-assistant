import logging
import json
from datetime import datetime, timedelta

from fastapi import FastAPI
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from mcp import Agentpip search mcp
from mcp.llms import OllamaLLM
from mcp.tools import google_maps, openweathermap

# === üîê API-–∫–ª—é—á–∏ ===
GOOGLE_MAPS_API_KEY = "your_google_maps_api_key"
OPENWEATHER_API_KEY = "your_openweather_api_key"
TELEGRAM_TOKEN = "your_telegram_token"

# === MCP –ê–≥–µ–Ω—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ ===
llm = OllamaLLM(model="mistral")  # –ò–ª–∏ "mistral:instruct" (–æ–ø–µ—á–∞—Ç–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
agent = Agent("travel-agent", llm=llm)
agent.add_tool(google_maps.Tool(api_key=GOOGLE_MAPS_API_KEY))
agent.add_tool(openweathermap.Tool(api_key=OPENWEATHER_API_KEY))

# === FastAPI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
app = FastAPI()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(name)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ 'name', –Ω—É–∂–Ω–æ 'name'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úàÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.\n\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ:\n"
        "üìç –ì–æ—Ä–æ–¥, üìÖ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10‚Äì13 –∏—é–ª—è), üí∞ –±—é–¥–∂–µ—Ç –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 40 –µ–≤—Ä–æ)"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    try:
        await update.message.reply_text("üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

        # === 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
        extract_prompt = f"""
        –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
        - –ì–æ—Ä–æ–¥ (city)
        - –î–∞—Ç—É –Ω–∞—á–∞–ª–∞ (start_date) –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        - –î–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (end_date)
        - –ë—é–¥–∂–µ—Ç –≤ –µ–≤—Ä–æ (budget)

        –í–µ—Ä–Ω–∏ JSON:
        {{
            "city": "...",
            "start_date": "...",
            "end_date": "...",
            "budget": ...
        }}

        –¢–µ–∫—Å—Ç:
        \"\"\"{user_input}\"\"\"
        """
        extract_response = await agent.run(extract_prompt)  # –î–æ–±–∞–≤–ª–µ–Ω await
        trip_info = json.loads(extract_response)

        city = trip_info["city"]
        start_date = trip_info["start_date"]
        end_date = trip_info["end_date"]
        budget = trip_info["budget"]

        # === 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –ø–æ–µ–∑–¥–∫–∏ ===
        start = datetime.strptime(start_date, "%Y-%m-%d")
        end = datetime.strptime(end_date, "%Y-%m-%d")
        dates = [(start + timedelta(days=i)).strftime("%Y-%m-%d") for i in range((end - start).days + 1)]

        await update.message.reply_text(f"üìç –ì–æ—Ä–æ–¥: {city}\nüìÖ –î–∞—Ç—ã: {start_date} ‚Äì {end_date}\nüí∞ –ë—é–¥–∂–µ—Ç: {budget}‚Ç¨/–¥–µ–Ω—å")

        # === 3. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===
        places_response = await agent.run(f"–ü–æ–∫–∞–∂–∏ 5 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤ {city}")  # –î–æ–±–∞–≤–ª–µ–Ω await
        # === 4. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã ===
        weather_query = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ –¥–∞—Ç—ã: {', '.join(dates)}"
        weather_response = await agent.run(weather_query)  # –î–æ–±–∞–≤–ª–µ–Ω await

        # === 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç ===
        itinerary_prompt = f"""
        –°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ–µ–∑–¥–∫–∏ –≤ {city} —Å {start_date} –ø–æ {end_date}, –±—é–¥–∂–µ—Ç {budget}‚Ç¨/–¥–µ–Ω—å.

        –í–æ—Ç –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
        {places_response}

        –í–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:
        {weather_response}

        –£—á–∏—Ç—ã–≤–∞–π –ø–æ–≥–æ–¥—É:
        - –¥–æ–∂–¥—å ‚Äî –∫—Ä—ã—Ç—ã–µ –º–µ—Å—Ç–∞
        - —Å–æ–ª–Ω—Ü–µ ‚Äî –ø—Ä–æ–≥—É–ª–∫–∏
        –î–æ–±–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç, –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.
        """

        itinerary = await agent.run(itinerary_prompt)  # –î–æ–±–∞–≤–ª–µ–Ω await

        await update.message.reply_text(f"üó∫Ô∏è –í–∞—à –ø–ª–∞–Ω:\n\n{itinerary}")

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–µ–∑–¥–∫–∏. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–æ—Ä–æ–¥, –¥–∞—Ç—ã (10-13 –∏—é–ª—è), –±—é–¥–∂–µ—Ç (40 –µ–≤—Ä–æ)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def main():
    bot_app = Application.builder().token(TELEGRAM_TOKEN).build()
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_app.run_polling()

if name == "main":  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ 'name', –Ω—É–∂–Ω–æ 'name'
    main()