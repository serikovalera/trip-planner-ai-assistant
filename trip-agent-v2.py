import re
import json
import random
import requests
from datetime import datetime, timedelta
from math import radians, cos, sin, asin, sqrt
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from langchain_community.llms import Ollama

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM —á–µ—Ä–µ–∑ LangChain ===
llm = Ollama(
    model='mistral:7b-instruct',
    temperature=0.5,
    num_ctx=1024,
    top_k=40,
    repeat_penalty=1.2,
    num_thread=4
)

def ask_mistral(prompt):
    """–ó–∞–ø—Ä–æ—Å –∫ Mistral —á–µ—Ä–µ–∑ LangChain"""
    try:
        return llm.invoke(prompt).strip()
    except Exception as e:
        print(f"LLM error: {e}")
        return ""

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
    "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
}
MONTH_NAMES = list(MONTHS.keys())
CATEGORY_PRICES = {
    "cafe": 700,
    "restaurant": 2000,
    "museum": 500,
    "park": 0,
    "art_gallery": 500
}

TELEGRAM_TOKEN = "–¢–û–ö–ï–ù"

# --- –ü–∞—Ä—Å–∏–Ω–≥ ---
def parse_dates(text):
    text = text.lower().replace("‚Äì", "-").replace("‚Äî", "-").replace("–ø–æ", "-").replace("—Å ", "")
    pattern = re.compile(r"(\d{1,2})\s*([–∞-—è]+)?\s*-\s*(\d{1,2})\s*([–∞-—è]+)?")
    match = pattern.search(text)
    if match:
        day1, month1, day2, month2 = match.groups()
        month1 = month1 or month2
        month2 = month2 or month1
        m1 = MONTHS.get(month1)
        m2 = MONTHS.get(month2)
        year = datetime.now().year
        try:
            start = datetime(year, m1, int(day1))
            end = datetime(year, m2, int(day2))
            if end < start:
                end = datetime(year + 1, m2, int(day2))
            return start, end
        except:
            return None, None
    return None, None

def parse_budget(text):
    match = re.search(r"(\d{3,})", text.replace(" ", "").replace(",", ""))
    return int(match.group(1)) if match else None

def parse_flexible_input_with_llm(text):
    prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{text}'. –í—ã–¥–µ–ª–∏ –≥–æ—Ä–æ–¥, –¥–∞—Ç—ã –∏ –±—é–¥–∂–µ—Ç –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {{"city": "–ú–æ—Å–∫–≤–∞", "dates": "15-16 –∏—é–Ω—è", "budget": "5000 —Ä—É–±–ª–µ–π"}}"""
    
    try:
        response = ask_mistral(prompt)
        json_str = re.search(r'\{.*\}', response, re.DOTALL)
        if json_str:
            data = json.loads(json_str.group(0))
            city = data.get('city', '').strip()
            budget = parse_budget(str(data.get('budget', '')))
            start, end = parse_dates(data.get('dates', ''))
            if city and start and end and budget:
                return city, start, end, budget
    except Exception as e:
        print(f"LLM parsing error: {e}")
    return None, None, None, None

def parse_user_input(text):
    parts = [p.strip() for p in text.split(",")]
    if len(parts) >= 3:
        city = parts[0]
        start, end = parse_dates(parts[1])
        budget = parse_budget(parts[2])
        if all([city, start, end, budget]):
            return city, start, end, budget
    
    patterns = [
        r"(?:–≤|–≥–æ—Ä–æ–¥)\s*(?P<city>[–∞-—è—ë]+)\s*(?P<dates>\d+.+\d+\s*[–∞-—è]+)\s*(?P<budget>\d+)",
        r"(?P<city>[–∞-—è—ë]+)\s*(?:—Å|–Ω–∞)\s*(?P<dates>\d+.+\d+\s*[–∞-—è]+)\s*(?:–∑–∞|–±—é–¥–∂–µ—Ç)\s*(?P<budget>\d+)"
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text.lower())
        if match:
            city = match.group('city').capitalize()
            start, end = parse_dates(match.group('dates'))
            budget = parse_budget(match.group('budget'))
            if all([city, start, end, budget]):
                return city, start, end, budget
    
    return parse_flexible_input_with_llm(text)

# --- –ì–µ–æ –∏ –ü–æ–≥–æ–¥–∞ ---
def get_coordinates(city):
    url = "https://nominatim.openstreetmap.org/search"
    params = {"q": city, "format": "json", "limit": 1}
    resp = requests.get(url, params=params, headers={"User-Agent": "trip-bot"})
    data = resp.json()
    if data:
        return float(data[0]['lat']), float(data[0]['lon'])
    return None, None

def get_weather_forecast(city, start_dt, end_dt):
    lat, lon = get_coordinates(city)
    if lat is None:
        return {}
    params = {
        "latitude": lat, "longitude": lon,
        "daily": "temperature_2m_max,temperature_2m_min,precipitation_sum",
        "timezone": "auto",
        "start_date": start_dt.strftime("%Y-%m-%d"),
        "end_date": end_dt.strftime("%Y-%m-%d")
    }
    resp = requests.get("https://api.open-meteo.com/v1/forecast", params=params)
    if resp.status_code != 200:
        return {}
    data = resp.json()
    weather = {}
    for i, date in enumerate(data.get("daily", {}).get("time", [])):
        temp_max = data["daily"]["temperature_2m_max"][i]
        temp_min = data["daily"]["temperature_2m_min"][i]
        rain = data["daily"]["precipitation_sum"][i]
        avg_temp = (temp_max + temp_min) / 2
        weather[date] = {
            "temp": round(avg_temp),
            "rain": rain,
            "main": "rain" if rain > 0 else "clear"
        }
    return weather

# --- –ú–µ—Å—Ç–∞ –∏ –ø–ª–∞–Ω ---
def get_attractions(city, categories):
    category_tags = {
        "museum": "tourism=museum",
        "park": "leisure=park",
        "restaurant": "amenity=restaurant",
        "cafe": "amenity=cafe",
        "art_gallery": "tourism=art_gallery",
        "hotel": "tourism=hotel"
    }
    places = []
    for cat in categories:
        tag = category_tags.get(cat)
        if not tag:
            continue
        query = f"""
        [out:json];
        area["name"="{city}"]->.searchArea;
        (
        node[{tag}](area.searchArea);
        way[{tag}](area.searchArea);
        relation[{tag}](area.searchArea);
        );
        out center 50;
        """
        resp = requests.post("https://overpass-api.de/api/interpreter", data={'data': query})
        try:
            for el in resp.json().get('elements', []):
                name = el.get('tags', {}).get('name')
                lat = el.get('lat') or el.get('center', {}).get('lat')
                lon = el.get('lon') or el.get('center', {}).get('lon')
                if name and lat and lon:
                    places.append({
                        "name": name, "type": cat,
                        "lat": lat, "lon": lon,
                        "price": CATEGORY_PRICES.get(cat, 1000 if cat != "hotel" else 4000)
                    })
        except:
            continue
    unique = {p['name']: p for p in places}
    return list(unique.values())

def haversine(lon1, lat1, lon2, lat2):
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*sin(dlon/2)**2
    return 2 * asin(sqrt(a)) * 6371

def sort_by_proximity(places):
    if not places:
        return []
    places = places[:]
    sorted_places = [places.pop(0)]
    while places:
        last = sorted_places[-1]
        places.sort(key=lambda x: haversine(last['lon'], last['lat'], x['lon'], x['lat']))
        sorted_places.append(places.pop(0))
    return sorted_places

def generate_daily_plan(date_str, weather, places, daily_budget, used_places):
    date = datetime.strptime(date_str, "%Y-%m-%d")
    temp = weather.get("temp", "?")
    main = weather.get("main", "clear")
    desc = {"rain": "–¥–æ–∂–¥—å üåßÔ∏è", "clear": "—è—Å–Ω–æ ‚òÄÔ∏è", "clouds": "–æ–±–ª–∞—á–Ω–æ ‚õÖ", "snow": "—Å–Ω–µ–≥ ‚ùÑÔ∏è"}

    plan = f"{date.strftime('%d ')}{MONTH_NAMES[date.month - 1]}:\n"
    plan += f"  –ü–æ–≥–æ–¥–∞: {temp}¬∞C, {desc.get(main, '—è—Å–Ω–æ ‚òÄÔ∏è')}\n"

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–≥–æ–¥–µ
    indoor_types = ("museum", "art_gallery", "cafe", "restaurant")
    outdoor_types = ("park",)
    suitable_types = indoor_types if main == "rain" else indoor_types + outdoor_types
    day_places = [p for p in places if p['type'] in suitable_types and p['name'] not in used_places]
    random.shuffle(day_places)
    day_places = sort_by_proximity(day_places)

    segments = {
        "üç≥ –ó–∞–≤—Ç—Ä–∞–∫": "cafe",
        "üèõÔ∏è –£—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ": ["museum", "art_gallery"],
        "üçΩÔ∏è –û–±–µ–¥": "restaurant",
        "üö∂ –ü–æ—Å–ª–µ –æ–±–µ–¥–∞": ["park", "cafe", "museum", "art_gallery"],
        "üåô –í–µ—á–µ—Ä–æ–º": ["cafe", "restaurant", "art_gallery", "park"]
    }
    used_budget = 0
    day_plan = []

    for part, types in segments.items():
        if isinstance(types, str):
            types = [types]

        for p in day_places:
            if p['type'] in types and p['name'] not in used_places:
                cost = p['price']
                if used_budget + cost <= daily_budget:
                    day_plan.append(f"  {part}: {p['name']} ({p['type'].capitalize()}, ~{cost}‚ÇΩ)")
                    used_budget += cost
                    used_places.add(p['name'])
                    break

    if not day_plan:
        plan += "  –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
    else:
        plan += "\n".join(day_plan) + "\n"

    return plan


# --- Telegram Bot ---
async def split_and_send(chat, text, max_length=4000):
    parts = [text[i:i+max_length] for i in range(0, len(text), max_length)]
    for part in parts:
        await chat.send_message(part)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üöÄ –ù–∞—á–∞—Ç—å":
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, –ø–æ–º–æ–≥—É —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞üçÄ. –í–≤–µ–¥–∏: –ì–æ—Ä–æ–¥, –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15-16 –∏—é–Ω—è), –±—é–¥–∂–µ—Ç (—á–∏—Å–ª–æ)"
        )
        return
    
    city, start, end, budget = parse_user_input(text)
    
    if not all([city, start, end, budget]):
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–µ–∑–¥–∫–∏. –ü—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ú–æ—Å–∫–≤–∞, 15-16 –∏—é–Ω—è, 5000"
        )
        return

    days = (end - start).days + 1
    daily_budget = budget // days
    weather = get_weather_forecast(city, start, end)
    places = get_attractions(city, list(CATEGORY_PRICES.keys()) + ["hotel"])
    hotels = [p for p in places if p['type'] == "hotel" and p['price'] * days <= budget]
    start_date = start.strftime("%d ") + MONTH_NAMES[start.month - 1]  
    end_date = end.strftime("%d ") + MONTH_NAMES[end.month - 1]      
    reply = f"üõ´ –ü–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ {city} —Å {start_date} –ø–æ {end_date}\n"
    reply += f"üí∞ –û–±—â–∏–π –±—é–¥–∂–µ—Ç: {budget} ‚ÇΩ (~{daily_budget} ‚ÇΩ –≤ –¥–µ–Ω—å)\n\n"
    if hotels:
        reply += "üè® –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏:\n" + "\n".join([f"  ‚Ä¢ {h['name']} (~{h['price']}‚ÇΩ/–¥–µ–Ω—å)" for h in hotels[:3]]) + "\n\n"

    used_places = set()
    for i in range(days):
        date = start + timedelta(days=i)
        day_str = date.strftime("%Y-%m-%d")
        w = weather.get(day_str, {"temp": "?", "main": "clear"})
        reply += generate_daily_plan(day_str, w, places, daily_budget, used_places) + "\n"

    enriched = ask_mistral(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–µ–¥–µ—Ç –≤ {city} —Å {start.strftime('%d %B')} –ø–æ {end.strftime('%d %B')} —Å –±—é–¥–∂–µ—Ç–æ–º {budget}‚ÇΩ. –ü—Ä–∏–¥—É–º–∞–π 3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–¥–µ–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–µ—Å—Ç–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π/–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø—Ä–∏—Ä–æ–¥–æ–π. –§–æ—Ä–º–∞—Ç: 1) –ù–∞–∑–≤–∞–Ω–∏–µ... 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è; 2) –ù–∞–∑–≤–∞–Ω–∏–µ... 3) –ù–∞–∑–≤–∞–Ω–∏–µ.. –¢–æ–ª—å–∫–æ —Ç—Ä–∏ –∏–¥–µ–∏. –û—Ç–≤–µ—á–∞–π –≥—Ä–∞–º–º–æ—Ç–Ω–æ –Ω–∞ –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï")
    reply += "üåü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + enriched

    await split_and_send(update.message.chat, reply)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É üëá",
                                            reply_markup=reply_markup)

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
